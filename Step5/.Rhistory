setwd("../Users/veronicalombardi/Desktop/PatientProfiler_BRCA/Step2/")
# Load clinical data and extract patient ids
clinical_dataframe <- read_tsv("../Step1/clinical_dataframe.tsv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source('0.libraries.R')
# Load clinical data and extract patient ids
clinical_dataframe <- read_tsv("../Step1/clinical_dataframe.tsv")
rownames(clinical_dataframe) <- clinical_dataframe$Name
clinical_dataframe.T <- as.data.frame(t(clinical_dataframe))[-1, , drop = FALSE]
clinical_dataframe.T <- clinical_dataframe.T[, c(5, 8), drop = FALSE]
clinical_dataframe.T$patient_ID <- rownames(clinical_dataframe.T)
pat_names <- clinical_dataframe.T$patient_ID
# Load gene matrix
gene_matrix <- read_tsv("../Step1/Brca_mutations.tsv")
total_patients <- length(pat_names)
seq_len(total_patients)
i = 1
patient_id <- pat_names[i]
# Load patient data
patient_file <- paste0("Activities/Activity_Patient_", patient_id, ".tsv")
Patient <- read_tsv(patient_file)
View(Patient)
patient_id %in% gene_matrix$Patient_ID
gene_names <- setdiff(colnames(gene_matrix), "Patient_ID")
gene_names
Patient$gene_name
gene = "TP53"
message("Updating common gene for patient: ", patient_id)
Patient$final_score[Patient$gene_name == gene] <- gene_matrix[gene_matrix$Patient_ID == patient_id, gene][[1]]
gene_matrix[gene_matrix$Patient_ID == patient_id, gene][[1]]
Patient$final_score[Patient$gene_name == gene]
# Load clinical data and extract patient ids
clinical_dataframe <- read_tsv("../Step1/clinical_dataframe.tsv")
rownames(clinical_dataframe) <- clinical_dataframe$Name
clinical_dataframe.T <- as.data.frame(t(clinical_dataframe))[-1, , drop = FALSE]
clinical_dataframe.T <- clinical_dataframe.T[, c(5, 8), drop = FALSE]
clinical_dataframe.T$patient_ID <- rownames(clinical_dataframe.T)
pat_names <- clinical_dataframe.T$patient_ID
# Load gene matrix
gene_matrix <- read_tsv("../Step1/Brca_mutations.tsv")
total_patients <- length(pat_names)
patient_id <- pat_names[i]
# Load patient data
patient_file <- paste0("Activities/Activity_Patient_", patient_id, ".tsv")
Patient <- read_tsv(patient_file)
gene_names <- setdiff(colnames(gene_matrix), "Patient_ID")
gene_matrix[gene_matrix$Patient_ID == patient_id, gene][[1]]
Patient$final_score[Patient$gene_name == gene]
Patient$method[Patient$gene_name == gene] <- "constraints"
Patient$mf[Patient$gene_name == gene] <- "rec"
final_score_value <- as.numeric(gene_matrix[gene_matrix$Patient_ID == patient_id, gene][[1]])
new_row <- data.frame(
gene_name = gene,
final_score = final_score_value,
UNIPROT = NA,
mf = "rec",
method = "constraints",
stringsAsFactors = FALSE
)
new_row
initialize_net_default_params
setwd("../Step5/")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
source('0.libraries.R')
extract_signatures
base_path = "../Step4/Communities/output_communities/"
output_dir = "./Run_for_communities_2_3_4_7"
diff_thres = 0.7
padj_thres = 0.01
mean_exp_clus_thres = 0
max_val = 50
cache = FALSE
message("Warning: This function may take a long time to execute.")
message("Creating output directories...")
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
output_file <- file.path(output_dir, "Anova_result.tsv")
signature_dir <- file.path(output_dir, "Signatures")
dir.create(signature_dir, showWarnings = FALSE)
message("Scanning community folders...")
community_folders <- list.dirs(base_path, recursive = FALSE)
stratification_table <- data.frame()
for (community_folder in community_folders) {
community_id <- basename(community_folder)
patients_file <- file.path(community_folder, "patients.txt")
if (file.exists(patients_file)) {
message(paste("Processing", patients_file))
community_data <- read.table(patients_file, header = FALSE, stringsAsFactors = FALSE)
colnames(community_data)[1] <- "Patient_ID"
community_data$community <- community_id
stratification_table <- rbind(stratification_table, community_data)
} else {
warning(paste("File not found:", patients_file))
}
}
message("Loading transcriptomics data...")
Transcriptomics_patients <- readr::read_tsv(transcriptomics_file) %>%
pivot_longer(cols = -1, names_to = "Patient_ID", values_to = "value")
transcriptomics_file = "./Transcriptomics_updated_CPTAC_coding.tsv"
message("Warning: This function may take a long time to execute.")
message("Creating output directories...")
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
if(!cache){
output_file <- file.path(output_dir, "Anova_result.tsv")
signature_dir <- file.path(output_dir, "Signatures")
dir.create(signature_dir, showWarnings = FALSE)
message("Scanning community folders...")
community_folders <- list.dirs(base_path, recursive = FALSE)
stratification_table <- data.frame()
for (community_folder in community_folders) {
community_id <- basename(community_folder)
patients_file <- file.path(community_folder, "patients.txt")
if (file.exists(patients_file)) {
message(paste("Processing", patients_file))
community_data <- read.table(patients_file, header = FALSE, stringsAsFactors = FALSE)
colnames(community_data)[1] <- "Patient_ID"
community_data$community <- community_id
stratification_table <- rbind(stratification_table, community_data)
} else {
warning(paste("File not found:", patients_file))
}
}
message("Loading transcriptomics data...")
Transcriptomics_patients <- readr::read_tsv(transcriptomics_file) %>%
pivot_longer(cols = -1, names_to = "Patient_ID", values_to = "value")
Transcriptomics_patients <- left_join(Transcriptomics_patients, stratification_table, by = 'Patient_ID')
message("Performing ANOVA analysis...")
final_results <- perform_anova(Transcriptomics_patients, stratification_table)
write_tsv(final_results, output_file)
}else{
message("Reading previously generated Anova result...")
if(file.exists(file.path(output_dir, "Anova_result.tsv"))){
final_results <- readr::read_tsv(file.path(output_dir, "Anova_result.tsv"),show_col_types = F)
signature_dir <- file.path(output_dir, "Signatures")
dir.create(signature_dir, showWarnings = FALSE)
}
}
diff_thres = 0.5
output_dir = "./Run_for_communities_1_5_6"
diff_thres = 0.5
message("Warning: This function may take a long time to execute.")
message("Creating output directories...")
dir.create(output_dir, recursive = TRUE, showWarnings = FALSE)
if(!cache){
output_file <- file.path(output_dir, "Anova_result.tsv")
signature_dir <- file.path(output_dir, "Signatures")
dir.create(signature_dir, showWarnings = FALSE)
message("Scanning community folders...")
community_folders <- list.dirs(base_path, recursive = FALSE)
stratification_table <- data.frame()
for (community_folder in community_folders) {
community_id <- basename(community_folder)
patients_file <- file.path(community_folder, "patients.txt")
if (file.exists(patients_file)) {
message(paste("Processing", patients_file))
community_data <- read.table(patients_file, header = FALSE, stringsAsFactors = FALSE)
colnames(community_data)[1] <- "Patient_ID"
community_data$community <- community_id
stratification_table <- rbind(stratification_table, community_data)
} else {
warning(paste("File not found:", patients_file))
}
}
message("Loading transcriptomics data...")
Transcriptomics_patients <- readr::read_tsv(transcriptomics_file) %>%
pivot_longer(cols = -1, names_to = "Patient_ID", values_to = "value")
Transcriptomics_patients <- left_join(Transcriptomics_patients, stratification_table, by = 'Patient_ID')
message("Performing ANOVA analysis...")
final_results <- perform_anova(Transcriptomics_patients, stratification_table)
write_tsv(final_results, output_file)
}else{
message("Reading previously generated Anova result...")
if(file.exists(file.path(output_dir, "Anova_result.tsv"))){
final_results <- readr::read_tsv(file.path(output_dir, "Anova_result.tsv"),show_col_types = F)
signature_dir <- file.path(output_dir, "Signatures")
dir.create(signature_dir, showWarnings = FALSE)
}
}
message("Extracting signatures...")
for (cluster_i in unique(final_results$cluster)) {
message(paste("Processing cluster:", cluster_i))
final_results_filtered <- final_results %>%
dplyr::arrange(`p adj`) %>%
dplyr::filter(cluster == cluster_i &
`p adj` < padj_thres &
diff > diff_thres &
mean_exp_clus > mean_exp_clus_thres)
if (nrow(final_results_filtered) > max_val) {
message(paste("Limiting to", max_val, "entries for cluster", cluster_i))
final_results_filtered <- final_results_filtered[1:max_val,]
}
output_signature_file <- file.path(signature_dir, paste0('signature_', cluster_i, '.tsv'))
write_tsv(final_results_filtered[, 5:6], output_signature_file)
message(paste("Signature saved to", output_signature_file))
}
