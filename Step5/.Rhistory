dplyr::slice_max(order_by = NES, n = 1) %>%
dplyr::ungroup() %>%
dplyr::filter(padj <= 0.01)  %>%
dplyr::select(patient_id, pathway) %>%
dplyr::rename(patient_ID = patient_id) %>%
dplyr::rename(Signature = pathway) %>%
dplyr::mutate(Signature = gsub("^CL", "Signature", Signature))
View(global_table_enrichment_sign)
View(tcga_df)
# Filter significant enrichment results
global_table_enrichment_sign <- global_table_enrichment %>%
group_by(patient_id) %>%
slice_max(order_by = NES, n = 1) %>%
ungroup() %>%
filter(padj <= 0.01)
# Filter significant enrichment results
global_table_enrichment_sign <- global_table_enrichment %>%
group_by(patient_id) %>%
slice_max(order_by = NES, n = 1) %>%
ungroup() %>%
filter(padj <= 0.01) %>%
dplyr::rename(patient_ID = patient_id) %>%
dplyr::rename(Signature = pathway) %>%
dplyr::mutate(Signature = gsub("^CL", "Signature", Signature))
View(global_table_enrichment_sign)
tcga_df <- read_xlsx("transcriptomics_signature_enrichment_communities_tcga.xlsx")
View(tcga_df)
# Filter significant enrichment results
tcga_df <- tcga_df %>%
group_by(patient_id) %>%
slice_max(order_by = NES, n = 1) %>%
ungroup() %>%
filter(padj <= 0.01) %>%
dplyr::rename(patient_ID = patient_id) %>%
dplyr::rename(Signature = pathway) %>%
dplyr::mutate(Signature = gsub("^CL", "Signature", Signature))
file_path <- "TCGA_TNBC_lehman.xlsx"
file_path <- "S3_lehman.xlsx"
sheets <- excel_sheets(file_path)
print(sheets)
lehman_data <- read_excel("S3_lehman.xlsx", sheet = sheets[2])
View(lehman_data)
lehman_data <- lehman_data[,c(1,4)]
colnames(lehman_data) <- lehman_data[1,]
lehman_data <- lehman_data[-1,]
colnames(lehman_data) <-c("patient_ID", "Subtype")
colnames(lehman_data)
unique(lehman_data$Subtype)
clinical_tcga <- lehman_data
tcga_df <- read_xlsx("transcriptomics_signature_enrichment_communities_tcga.xlsx")
# Filter significant enrichment results
tcga_df <- tcga_df %>%
group_by(patient_id) %>%
slice_max(order_by = NES, n = 1) %>%
ungroup() %>%
filter(padj <= 0.01) %>%
dplyr::rename(patient_ID = patient_id) %>%
dplyr::rename(Signature = pathway) %>%
dplyr::mutate(Signature = gsub("^CL", "Signature", Signature))
tcga_df_clinic <- merge(tcga_df, clinical_tcga)
lehman_data$patient_ID <- sub("-01$", "", lehman_data$patient_ID)
clinical_tcga <- lehman_data
tcga_df_clinic <- merge(tcga_df, clinical_tcga)
View(tcga_df_clinic)
tcga_df_clinic <- merge(tcga_df, clinical_tcga, all = TRUE)
View(tcga_df_clinic)
tcga_df_clinic <- merge(tcga_df, clinical_tcga, by = "patient_ID", all.x = TRUE)
cptac_df <- read_tsv("../Step4/patients_cluster.tsv")
cptac_df <- cptac_df %>%
dplyr::rename(Signature = community) %>%
dplyr::mutate(Signature = gsub("^community_", "Signature", Signature))  %>%
dplyr::rename(Subtype = NMF.Cluster)
output_list <- list(
CPTAC = cptac_df,
TCGA = tcga_df_clinic
)
View(tcga_df_clinic)
View(cptac_df)
# Scrive il file con due fogli
write_xlsx(output_list, path = "Table_3.xlsx")
TCGA_subtypes <-tcga_df_clinic
df_clinical_status_total <- inner_join(TCGA_subtypes,
df_clinical_status_total)
# Create the `all_data` list using `map()`
all_data <- map(unique(global_table_enrichment_sign$pathway), function(community) {
subset_trans_long <- dplyr::filter(global_table_enrichment_sign, pathway == community)
current_df <- dplyr::filter(df_clinical_status, patient_ID %in% subset_trans_long$patient_id)
# Find common patients in both datasets
common_rows <- intersect(current_df$patient_ID, subset_trans_long$patient_id)
if (length(common_rows) == 0) return(NULL)  # Return NULL if no common rows exist
# Filter only common patients and sort
current_df_common <- filter(current_df, patient_ID %in% common_rows) %>% arrange(patient_ID)
subset_trans_long_common <- dplyr::filter(subset_trans_long, patient_id %in% common_rows) %>% arrange(patient_id)
if (nrow(current_df_common) == nrow(subset_trans_long_common)) {
current_df_common$group <- subset_trans_long_common$pathway
return(current_df_common)
} else {
warning(paste("Mismatch in row counts for community:", community))
return(NULL)
}
}) %>% compact()  # Remove NULL elements
# Combine the data into a single dataframe
df_clinical_status_total <- bind_rows(all_data)
df_clinical_status_total <- inner_join(TCGA_subtypes,
df_clinical_status_total)
View(df_clinical_status)
TCGA_subtypes <-tcga_df_clinic
# Combine the data into a single dataframe
df_clinical_status_total <- bind_rows(all_data)
# Load clinical data
clinic <- read_tsv("clinical_TCGA.tsv")
# Remove first two rows (assuming they contain metadata)
clinic <- clinic[-(1:2), ]
# Create a dataframe with patient survival information
## V2 improvement Livia
df_clinical_status <- data.frame(
patient_ID = clinic$patient_ID,
serial_time = as.numeric(ifelse(clinic$death_days_to == '[Not Applicable]',
clinic$last_contact_days_to, clinic$death_days_to)),
status = ifelse(clinic$vital_status == 'Alive', 0, 1),  # Initialize status as 0 (alive)
group = NA
)
# Order by survival time
df_clinical_status <- df_clinical_status[order(df_clinical_status$serial_time), ]
# Filter significant enrichment results
global_table_enrichment_sign <- global_table_enrichment %>%
group_by(patient_id) %>%
slice_max(order_by = NES, n = 1) %>%
ungroup() %>%
filter(padj <= 0.01)
# Create the `all_data` list using `map()`
all_data <- map(unique(global_table_enrichment_sign$pathway), function(community) {
subset_trans_long <- dplyr::filter(global_table_enrichment_sign, pathway == community)
current_df <- dplyr::filter(df_clinical_status, patient_ID %in% subset_trans_long$patient_id)
# Find common patients in both datasets
common_rows <- intersect(current_df$patient_ID, subset_trans_long$patient_id)
if (length(common_rows) == 0) return(NULL)  # Return NULL if no common rows exist
# Filter only common patients and sort
current_df_common <- filter(current_df, patient_ID %in% common_rows) %>% arrange(patient_ID)
subset_trans_long_common <- dplyr::filter(subset_trans_long, patient_id %in% common_rows) %>% arrange(patient_id)
if (nrow(current_df_common) == nrow(subset_trans_long_common)) {
current_df_common$group <- subset_trans_long_common$pathway
return(current_df_common)
} else {
warning(paste("Mismatch in row counts for community:", community))
return(NULL)
}
}) %>% compact()  # Remove NULL elements
# Combine the data into a single dataframe
df_clinical_status_total <- bind_rows(all_data)
df_clinical_status_total <- inner_join(TCGA_subtypes,
df_clinical_status_total)
View(df_clinical_status_total)
### restrict analysis to monitor 5-yrs survival
df_clinical_status_total <- df_clinical_status_total%>%
dplyr::filter(serial_time < 365*5)
count_data_abs <- df_clinical_status_total %>%
dplyr::group_by(group, Subtype) %>%
dplyr::summarise(n = n(), .groups = "drop")
colnames(count_data_abs) <- c('Signature','Subtype','n')
count_data_abs
subtype_colors <- c(
"Basal" = "brown",
"Her2 " = "darkgoldenrod",
"LumA" = "deepskyblue4",
"LumB" = "chartreuse4",
"Normal" = "grey50"
)
# Barplot stacked with abs values
p_abs <- ggplot(count_data_abs, aes(x = Signature, y = n, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors) +
ylab("Number of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (absolute counts)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
p_abs
## Livia: qui come si chiama la figura?
ggsave("signatures_subdivision_TCGA_absolute_count_PAM50_LEHMAN.svg", plot = p_abs, width = 8, height = 6, device = "svg")
View(plot)
subtype_colors <- c(
"Basal" = "brown",
"Her2 " = "darkgoldenrod",
"LumA" = "deepskyblue4",
"LumB" = "chartreuse4",
"Normal" = "grey50",
"NA" = "black"
)
# Barplot stacked with abs values
p_abs <- ggplot(count_data_abs, aes(x = Signature, y = n, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors) +
ylab("Number of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (absolute counts)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
## Livia: qui come si chiama la figura?
ggsave("signatures_subdivision_TCGA_absolute_count_PAM50_LEHMAN.svg", plot = p_abs, width = 8, height = 6, device = "svg")
subtype_colors <- c(
"Basal" = "brown",
"Her2 " = "darkgoldenrod",
"LumA" = "deepskyblue4",
"LumB" = "chartreuse4",
"Normal" = "grey50",
NA = "black"
# Barplot stacked with abs values
p_abs <- ggplot(count_data_abs, aes(x = Signature, y = n, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors) +
ylab("Number of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (absolute counts)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
subtype_colors <- c(
"Basal" = "brown",
"Her2 " = "darkgoldenrod",
"LumA" = "deepskyblue4",
"LumB" = "chartreuse4",
"Normal" = "grey50"
)
# Supponiamo tu abbia un vettore di subtypes chiamato `subtypes`
subtype_colors <- subtype_colors[subtypes]
# Metti "black" per i NA
subtype_colors[is.na(subtype_colors)] <- "black"
# Barplot stacked with abs values
p_abs <- ggplot(count_data_abs, aes(x = Signature, y = n, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors) +
ylab("Number of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (absolute counts)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
subtype_colors <- c(
"Basal" = "brown",
"Her2 " = "darkgoldenrod",
"LumA" = "deepskyblue4",
"LumB" = "chartreuse4",
"Normal" = "grey50"
)
p_abs <- ggplot(count_data_abs, aes(x = Signature, y = n, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors, na.value = "black") +
ylab("Number of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (absolute counts)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggsave("signatures_subdivision_TCGA_absolute_count_PAM50_LEHMAN.svg", plot = p_abs, width = 8, height = 6, device = "svg")
df_clinical_status_total <- df_clinical_status_total %>%
filter(!is.na(Subtype))
# Combine the data into a single dataframe
df_clinical_status_total <- bind_rows(all_data)
### restrict analysis to monitor 5-yrs survival
df_clinical_status_total <- df_clinical_status_total%>%
dplyr::filter(serial_time < 365*5)
count_data_abs <- df_clinical_status_total %>%
dplyr::group_by(group, Subtype) %>%
dplyr::summarise(n = n(), .groups = "drop")
colnames(count_data_abs) <- c('Signature','Subtype','n')
# Combine the data into a single dataframe
df_clinical_status_total <- bind_rows(all_data)
df_clinical_status_total <- inner_join(TCGA_subtypes,
df_clinical_status_total)
View(df_clinical_status_total)
df_clinical_status_total <- inner_join(TCGA_subtypes,
df_clinical_status_total)
df_clinical_status_total <- df_clinical_status_total %>%
filter(!is.na(Subtype))
View(df_clinical_status_total)
### restrict analysis to monitor 5-yrs survival
df_clinical_status_total <- df_clinical_status_total%>%
dplyr::filter(serial_time < 365*5)
count_data_abs <- df_clinical_status_total %>%
dplyr::group_by(group, Subtype) %>%
dplyr::summarise(n = n(), .groups = "drop")
count_data_abs
df_clinical_status_total <- df_clinical_status_total %>%
filter(!"NA")
df_clinical_status_total <- df_clinical_status_total %>%
filter(Subtype =!"NA")
df_clinical_status_total <- df_clinical_status_total %>%
filter(Subtype !="NA")
count_data_abs <- df_clinical_status_total %>%
dplyr::group_by(group, Subtype) %>%
dplyr::summarise(n = n(), .groups = "drop")
count_data_abs
colnames(count_data_abs) <- c('Signature','Subtype','n')
subtype_colors <- c(
"Basal" = "brown",
"Her2 " = "darkgoldenrod",
"LumA" = "deepskyblue4",
"LumB" = "chartreuse4",
"Normal" = "grey50"
)
# Barplot stacked with abs values
p_abs <- ggplot(count_data_abs, aes(x = Signature, y = n, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors) +
ylab("Number of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (absolute counts)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
## Livia: qui come si chiama la figura?
ggsave("signatures_subdivision_TCGA_absolute_count_PAM50_LEHMAN.svg", plot = p_abs, width = 8, height = 6, device = "svg")
subtype_colors <- c(
"Basal" = "brown",
"Her2 " = "darkgoldenrod",
"LumA" = "deepskyblue4",
"LumB" = "chartreuse4",
"Normal" = "grey50"
)
# Barplot stacked with abs values
p_abs <- ggplot(count_data_abs, aes(x = Signature, y = n, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors) +
ylab("Number of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (absolute counts)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
p_abs
subtype_colors <- c(
"Basal" = "brown",
"Her2" = "darkgoldenrod",
"LumA" = "deepskyblue4",
"LumB" = "chartreuse4",
"Normal" = "grey50"
)
# Barplot stacked with abs values
p_abs <- ggplot(count_data_abs, aes(x = Signature, y = n, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = n),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors) +
ylab("Number of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (absolute counts)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
## Livia: qui come si chiama la figura?
ggsave("signatures_subdivision_TCGA_absolute_count_PAM50_LEHMAN.svg", plot = p_abs, width = 8, height = 6, device = "svg")
# Calcola percentuali
count_data_perc <- count_data_abs %>%
group_by(Signature) %>%
mutate(percent = n / sum(n) * 100) %>%
ungroup()
# Barplot stacked con percentuali
p_perc <- ggplot(count_data_perc, aes(x = Signature, y = percent, fill = Subtype)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", percent)),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors, na.value = "black") +
ylab("Percentage of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (percentages)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# Salva il plot
ggsave("signatures_subdivision_TCGA_percentage_PAM50_LEHMAN.svg", plot = p_perc, width = 8, height = 6, device = "svg")
count_data_perc
p_perc
p_perc <- ggplot(df_clinical_status_total, aes(x = group, fill = Subtype)) +
geom_bar(position = "fill") +
geom_text(aes(label = scales::percent(..count../tapply(..count.., ..x.., sum)[..x..], accuracy = 0.1)),
stat = "count",
position = position_fill(vjust = 0.5),
color = "white", size = 3.5) +
scale_fill_manual(name = "Subtype", values = subtype_colors, na.value = "black") +
ylab("Percentage of patients") +
xlab("Signature") +
ggtitle("Signatures subdivision in TCGA patients (percentages)") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
p_perc
# Salva il plot
ggsave("signatures_subdivision_TCGA_percentage_PAM50_LEHMAN.svg", plot = p_perc, width = 8, height = 6, device = "svg")
lehman_data <- read_excel("S3_lehman.xlsx", sheet = sheets[2])
lehman_data <- lehman_data[,c(1,4)]
colnames(lehman_data) <- lehman_data[1,]
lehman_data <- lehman_data[-1,]
colnames(lehman_data) <-c("patient_ID", "Subtype")
lehman_data$patient_ID <- sub("-01$", "", lehman_data$patient_ID)
clinical_tcga <- lehman_data
tcga_df <- read_xlsx("transcriptomics_signature_enrichment_communities_tcga.xlsx")
# Filter significant enrichment results
tcga_df <- tcga_df %>%
group_by(patient_id) %>%
slice_max(order_by = NES, n = 1) %>%
ungroup() %>%
filter(padj <= 0.01) %>%
dplyr::rename(patient_ID = patient_id) %>%
dplyr::rename(Signature = pathway) %>%
dplyr::mutate(Signature = gsub("^CL", "Signature", Signature))
tcga_df_clinic <- merge(tcga_df, clinical_tcga, by = "patient_ID", all.x = TRUE)
cptac_df <- read_tsv("../Step4/patients_cluster.tsv")
cptac_df <- cptac_df %>%
dplyr::rename(Signature = community) %>%
dplyr::mutate(Signature = gsub("^community_", "Signature", Signature))  %>%
dplyr::rename(Subtype = NMF.Cluster)
output_list <- list(
CPTAC = cptac_df,
TCGA = tcga_df_clinic
)
write_xlsx(output_list, path = "Table_3.xlsx")
View(tcga_df_clinic)
lehman_data <- read_excel("S3_lehman.xlsx", sheet = sheets[2])
lehman_data <- lehman_data[,c(1,4)]
colnames(lehman_data) <- lehman_data[1,]
lehman_data <- lehman_data[-1,]
colnames(lehman_data) <-c("patient_ID", "Subtype")
lehman_data$patient_ID <- sub("-01$", "", lehman_data$patient_ID)
clinical_tcga <- lehman_data
tcga_df <- read_xlsx("transcriptomics_signature_enrichment_communities_tcga.xlsx")
# Filter significant enrichment results
tcga_df <- tcga_df %>%
group_by(patient_id) %>%
slice_max(order_by = NES, n = 1) %>%
ungroup() %>%
filter(padj <= 0.01) %>%
dplyr::rename(patient_ID = patient_id) %>%
dplyr::rename(Signature = pathway) %>%
dplyr::mutate(Signature = gsub("^CL", "Signature", Signature))
tcga_df_clinic <- merge(tcga_df, clinical_tcga, by = "patient_ID", all.x = TRUE)
tcga_df_clinic <- tcga_df_clinic[,c(1,2,5)]
cptac_df <- read_tsv("../Step4/patients_cluster.tsv")
cptac_df <- cptac_df %>%
dplyr::rename(Signature = community) %>%
dplyr::mutate(Signature = gsub("^community_", "Signature", Signature))  %>%
dplyr::rename(Subtype = NMF.Cluster)
output_list <- list(
CPTAC = cptac_df,
TCGA = tcga_df_clinic
)
write_xlsx(output_list, path = "Table_3.xlsx")
