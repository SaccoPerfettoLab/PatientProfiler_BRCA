RCy3::setVisualStyle("PatientProfiler_communities_style")
} else {
warning("Style file not found: ", style_file)
RCy3::createNetworkFromIgraph(igraph = graph,
title = community_name,
collection = "Communities")
}
}
visualize_community_2("community_7")
visualize_community_2 <- function(community_name,
comm_folder = "./Communities/output_communities/",
style_file = "/Users/veronicalombardi/Desktop/PatientProfiler/inst/extdata/prova.xml") {
# Extract community number
community_number <- stringr::str_extract(community_name, "\\d+$")
# File paths
path <- paste0(comm_folder, community_name, "/")
node_file <- paste0(path, "nodes_", community_number, ".csv")
edge_file <- paste0(path, "edges_", community_number, ".csv")
# Load data
node <- readr::read_csv(node_file)
edge <- readr::read_csv(edge_file)
# Modify gene_name
node$gene_id <- node$gene_name
node <- node %>%
dplyr::relocate(gene_id) %>%
dplyr::mutate(gene_name = stringr::str_remove(gene_name, "_INHIBITED"))
# Create graph
graph <- igraph::graph_from_data_frame(d = edge, vertices = node, directed = TRUE)
# Import style if file exists
if (file.exists(style_file)) {
RCy3::importVisualStyles(filename = style_file)
RCy3::createNetworkFromIgraph(igraph = graph,
title = community_name,
collection = "Communities")
RCy3::setVisualStyle("PatientProfiler_communities_style")
} else {
warning("Style file not found: ", style_file)
RCy3::createNetworkFromIgraph(igraph = graph,
title = community_name,
collection = "Communities")
}
}
visualize_community_2("community_7")
visualize_community_2 <- function(community_name,
comm_folder = "./Communities/output_communities/",
style_file = "/Users/veronicalombardi/Desktop/PatientProfiler/inst/extdata/pp_style_2.xml") {
# Extract community number
community_number <- stringr::str_extract(community_name, "\\d+$")
# File paths
path <- paste0(comm_folder, community_name, "/")
node_file <- paste0(path, "nodes_", community_number, ".csv")
edge_file <- paste0(path, "edges_", community_number, ".csv")
# Load data
node <- readr::read_csv(node_file)
edge <- readr::read_csv(edge_file)
# Modify gene_name
node$gene_id <- node$gene_name
node <- node %>%
dplyr::relocate(gene_id) %>%
dplyr::mutate(gene_name = stringr::str_remove(gene_name, "_INHIBITED"))
# Create graph
graph <- igraph::graph_from_data_frame(d = edge, vertices = node, directed = TRUE)
# Import style if file exists
if (file.exists(style_file)) {
RCy3::importVisualStyles(filename = style_file)
RCy3::createNetworkFromIgraph(igraph = graph,
title = community_name,
collection = "Communities")
RCy3::setVisualStyle("PatientProfiler_communities_style")
} else {
warning("Style file not found: ", style_file)
RCy3::createNetworkFromIgraph(igraph = graph,
title = community_name,
collection = "Communities")
}
}
visualize_community_2("community_7")
visualize_community_2("community_2")
visualize_community_2("community_4")
# Carica nodi e archi della community 2
nodes2 <- read_csv("./Users/veronicalombardi/Desktop/PatientProfiler_BRCA/Step4/output_communities/community_2/nodes_2.csv")
nodes2 <- read_csv("Communities/output_communities/community_2/nodes_2.csv)
nodes2 <- read_csv("Communities/output_communities/community_2/nodes_2.csv")
nodes2 <- read_csv("Communities/output_communities/community_2/nodes_2.csv")
View(nodes2)
nodes2 <- read_csv("Communities/output_communities/community_2/edges_2.csv")
View(nodes2)
# Lista delle community da processare
community_ids <- c("1,2","3","4", "5")  # aggiungi qui altre se servono
library(readr)
library(dplyr)
# Lista delle community da processare
community_ids <- c("1,2","3","4", "5")  # aggiungi qui altre se servono
for (id in community_ids) {
cat("Processing community", id, "\n")
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
nodes_to_remove <- incoming_from_pert[!incoming_from_pert %in% outgoing_edges$source]
cat("Nodi da rimuovere:", paste(nodes_to_remove, collapse = ", "), "\n")
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Salva file puliti
write_csv(nodes_clean, paste0("../../Step4/output_communities/community_", id, "/nodes_", id, "_clean.csv"))
write_csv(edges_clean, paste0("../../Step4/output_communities/community_", id, "/edges_", id, "_clean.csv"))
cat("Community", id, "pulita e salvata.\n")
}
# Lista delle community da processare
community_ids <- c("1,2","3","4", "5")  # aggiungi qui altre se servono
for (id in community_ids) {
cat("Processing community", id, "\n")
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
nodes_to_remove <- incoming_from_pert[!incoming_from_pert %in% outgoing_edges$source]
cat("Nodi da rimuovere:", paste(nodes_to_remove, collapse = ", "), "\n")
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Salva file puliti
write_csv(nodes_clean, paste0("Communities/output_communities/community_", id, "/nodes_", id, "_clean.csv"))
write_csv(edges_clean, paste0("Communities/output_communities/community_", id, "/edges_", id, "_clean.csv"))
cat("Community", id, "pulita e salvata.\n")
}
# Lista delle community da processare
community_ids <- c("1","2","3","4", "5")  # aggiungi qui altre se servono
for (id in community_ids) {
cat("Processing community", id, "\n")
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
nodes_to_remove <- incoming_from_pert[!incoming_from_pert %in% outgoing_edges$source]
cat("Nodi da rimuovere:", paste(nodes_to_remove, collapse = ", "), "\n")
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Salva file puliti
write_csv(nodes_clean, paste0("Communities/output_communities/community_", id, "/nodes_", id, "_clean.csv"))
write_csv(edges_clean, paste0("Communities/output_communities/community_", id, "/edges_", id, "_clean.csv"))
cat("Community", id, "pulita e salvata.\n")
}
library(readr)
library(dplyr)
# Lista delle community da processare
community_ids <- c("1","2","3","4", "5")  # aggiungi qui altre se servono
for (id in community_ids) {
cat("Processing community", id, "\n")
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(gene_name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
nodes_to_remove <- incoming_from_pert[!incoming_from_pert %in% outgoing_edges$source]
cat("Nodi da rimuovere:", paste(nodes_to_remove, collapse = ", "), "\n")
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Salva file puliti
write_csv(nodes_clean, paste0("Communities/output_communities/community_", id, "/nodes_", id, "_clean.csv"))
write_csv(edges_clean, paste0("Communities/output_communities/community_", id, "/edges_", id, "_clean.csv"))
cat("Community", id, "pulita e salvata.\n")
}
library(readr)
library(dplyr)
# Lista delle community da processare
community_ids <- c("1","2","3","4", "5")  # aggiungi qui altre se servono
for (id in community_ids) {
cat("Processing community", id, "\n")
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(gene_name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
nodes_to_remove <- incoming_from_pert[!incoming_from_pert %in% outgoing_edges$source]
cat("Nodi da rimuovere:", paste(nodes_to_remove, collapse = ", "), "\n")
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!gene_name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Salva file puliti
write_csv(nodes_clean, paste0("Communities/output_communities/community_", id, "/nodes_", id, "_clean.csv"))
write_csv(edges_clean, paste0("Communities/output_communities/community_", id, "/edges_", id, "_clean.csv"))
cat("Community", id, "pulita e salvata.\n")
}
id
View(nodes)
View(nodes_clean)
id
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(gene_name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
incoming_from_pert
View(edges)
visualize_community_2("community_5")
incoming_from_pert
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
outgoing_edges
nodes_to_remove
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!gene_name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Lista delle community da processare
community_ids <- c("1","2","3","4", "5"."6","7")  # aggiungi qui altre se servono
for (id in community_ids) {
cat("Processing community", id, "\n")
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(gene_name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
nodes_to_remove <- incoming_from_pert[!incoming_from_pert %in% outgoing_edges$source]
cat("Nodi da rimuovere:", paste(nodes_to_remove, collapse = ", "), "\n")
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!gene_name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Salva file puliti
write_csv(nodes_clean, paste0("Communities/output_communities/community_", id, "/nodes_", id, "_clean.csv"))
write_csv(edges_clean, paste0("Communities/output_communities/community_", id, "/edges_", id, "_clean.csv"))
cat("Community", id, "pulita e salvata.\n")
}
id
# Lista delle community da processare
community_ids <- c("1","2","3","4", "5"."6","7")  # aggiungi qui altre se servono
for (id in community_ids) {
cat("Processing community", id, "\n")
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(gene_name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
nodes_to_remove <- incoming_from_pert[!incoming_from_pert %in% outgoing_edges$source]
cat("Nodi da rimuovere:", paste(nodes_to_remove, collapse = ", "), "\n")
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!gene_name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Salva file puliti
write_csv(nodes_clean, paste0("Communities/output_communities/community_", id, "/nodes_", id, "_clean.csv"))
write_csv(edges_clean, paste0("Communities/output_communities/community_", id, "/edges_", id, "_clean.csv"))
cat("Community", id, "pulita e salvata.\n")
}
# Lista delle community da processare
community_ids <- c("1","2","3","4", "5"."6","7")  # aggiungi qui altre se servono
# Lista delle community da processare
community_ids <- c("1","2","3","4","5","6","7")  # aggiungi qui altre se servono
for (id in community_ids) {
cat("Processing community", id, "\n")
# Carica file
nodes <- read_csv(paste0("Communities/output_communities/community_", id, "/nodes_", id, ".csv"))
edges <- read_csv(paste0("Communities/output_communities/community_", id, "/edges_", id, ".csv"))
# Rimuovi Perturbation
nodes_clean <- nodes %>%
filter(gene_name != "Perturbation")
edges_clean <- edges %>%
filter(source != "Perturbation", target != "Perturbation")
# Trova nodi che hanno solo archi entranti da Perturbation e zero uscenti
incoming_from_pert <- edges %>%
filter(source == "Perturbation") %>%
pull(target)
outgoing_edges <- edges %>%
filter(source %in% incoming_from_pert)
nodes_to_remove <- incoming_from_pert[!incoming_from_pert %in% outgoing_edges$source]
cat("Nodi da rimuovere:", paste(nodes_to_remove, collapse = ", "), "\n")
# Rimuovi questi nodi da nodi e archi
nodes_clean <- nodes_clean %>%
filter(!gene_name %in% nodes_to_remove)
edges_clean <- edges_clean %>%
filter(!source %in% nodes_to_remove, !target %in% nodes_to_remove)
# Salva file puliti
write_csv(nodes_clean, paste0("Communities/output_communities/community_", id, "/nodes_", id, "_clean.csv"))
write_csv(edges_clean, paste0("Communities/output_communities/community_", id, "/edges_", id, "_clean.csv"))
cat("Community", id, "pulita e salvata.\n")
}
visualize_community_2("community_5")
visualize_community_2("community_2")
visualize_community_2("community_4")
visualize_community_2("community_1")
visualize_community_2 <- function(community_name,
comm_folder = "./Communities/output_communities/",
style_file = "/Users/veronicalombardi/Desktop/PatientProfiler/inst/extdata/pp_style.xml") {
# Extract community number
community_number <- stringr::str_extract(community_name, "\\d+$")
# File paths
path <- paste0(comm_folder, community_name, "/")
node_file <- paste0(path, "nodes_", community_number, ".csv")
edge_file <- paste0(path, "edges_", community_number, ".csv")
# Load data
node <- readr::read_csv(node_file)
edge <- readr::read_csv(edge_file)
# Modify gene_name
node$gene_id <- node$gene_name
node <- node %>%
dplyr::relocate(gene_id) %>%
dplyr::mutate(gene_name = stringr::str_remove(gene_name, "_INHIBITED"))
# Create graph
graph <- igraph::graph_from_data_frame(d = edge, vertices = node, directed = TRUE)
# Import style if file exists
if (file.exists(style_file)) {
RCy3::importVisualStyles(filename = style_file)
RCy3::createNetworkFromIgraph(igraph = graph,
title = community_name,
collection = "Communities")
RCy3::setVisualStyle("PatientProfiler_communities_style")
} else {
warning("Style file not found: ", style_file)
RCy3::createNetworkFromIgraph(igraph = graph,
title = community_name,
collection = "Communities")
}
}
visualize_community_2("community_1")
visualize_community_2("community_2")
visualize_community_2("community_3")
visualize_community_2("community_4")
visualize_community_2("community_5")
visualize_community_2("community_6")
visualize_community_2("community_6")
visualize_community_2("community_7")
if(!"RCy3" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3")
}
library(RCy3)
if(!"ndexr" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("ndexr")
}
library(ndexr)
# Connessione a NDEx
ndexcon <- ndex_connect(username = "VeronicaLombardi", password = "dekxyc-cozfe5-worbUf")
# Verifica connessione a Cytoscape
cytoscapePing()
# Ottieni lista dei network caricati in Cytoscape
networks <- getNetworkList()
# Loop sui network
for (network_name in networks) {
# Esporta il network e ottieni l'UUID
ndex_uuid <- exportNetworkToNDEx(
username = "VeronicaLombardi",
password = "dekxyc-cozfe5-worbUf",
isPublic = FALSE,
network = network_name
)
# Aggiorna le proprietà per assegnare al set
ndex_update_network_metadata(ndexcon, ndex_uuid,
properties = list(
networkSet = "Breast_cancer_networks_and_circuits"
))
cat(paste0("Network ", network_name, " caricato su NDEx con UUID ", ndex_uuid, " e assegnato al set.\n"))
}
if(!"RCy3" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3")
}
library(RCy3)
if(!"ndexr" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("ndexr")
}
library(ndexr)
# Connessione a NDEx
ndexcon <- ndex_connect(username = "VeronicaLombardi", password = "dekxyc-cozfe5-worbUf")
# Verifica connessione a Cytoscape
cytoscapePing()
# Ottieni lista dei network caricati in Cytoscape
networks <- getNetworkList()
# Loop sui network
for (network_name in networks) {
# Esporta il network e ottieni l'UUID
ndex_uuid <- exportNetworkToNDEx(
username = "VeronicaLombardi",
password = "dekxyc-cozfe5-worbUf",
isPublic = FALSE,
network = network_name
)
# # Aggiorna le proprietà per assegnare al set
# ndex_update_network_metadata(ndexcon, ndex_uuid,
#                              properties = list(
#                                networkSet = "Breast_cancer_networks_and_circuits"
#                              ))
#
cat(paste0("Network ", network_name, " caricato su NDEx con UUID ", ndex_uuid, " e assegnato al set.\n"))
}
print("Tutti i network sono stati caricati e assegnati al set su NDEx con successo!")
if(!"RCy3" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("RCy3")
}
library(RCy3)
if(!"ndexr" %in% installed.packages()){
install.packages("BiocManager")
BiocManager::install("ndexr")
}
library(ndexr)
# Connessione a NDEx
ndexcon <- ndex_connect(username = "VeronicaLombardi", password = "dekxyc-cozfe5-worbUf")
# Verifica connessione a Cytoscape
cytoscapePing()
# Ottieni lista dei network caricati in Cytoscape
networks <- getNetworkList()
# Loop sui network
for (network_name in networks) {
# Esporta il network e ottieni l'UUID
ndex_uuid <- exportNetworkToNDEx(
username = "VeronicaLombardi",
password = "dekxyc-cozfe5-worbUf",
isPublic = FALSE,
network = network_name
)
# # Aggiorna le proprietà per assegnare al set
# ndex_update_network_metadata(ndexcon, ndex_uuid,
#                              properties = list(
#                                networkSet = "Breast_cancer_networks_and_circuits"
#                              ))
#
cat(paste0("Network ", network_name, " caricato su NDEx con UUID ", ndex_uuid, " e assegnato al set.\n"))
}
print("Tutti i network sono stati caricati e assegnati al set su NDEx con successo!")
